var documenterSearchIndex = {"docs":
[{"location":"quickstart/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"quickstart/#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"As this module is not published yet, there are two ways to access it:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Install from GitHub\nEnter the Julia package manager julia> ]\ntype add https://github.com/reykboerner/CriticalTransitions.jl.git\nLoad module locally\nClone the repo: git clone https://github.com/reykboerner/CriticalTransitions.jl.git\nIn Julia, include the module file: include(\"PATH/src/CriticalTransitions.jl\"), where PATH is the relative path to the repo you just cloned\nLoad the module: using .CriticalTransitions","category":"page"},{"location":"quickstart/#Basic-usage","page":"Getting started","title":"Basic usage","text":"","category":"section"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"The general workflow of CriticalTransitions essentially follows two steps:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Define your system (see Defining a StochSystem)\nInvestigate the system by calling methods (see Methods)","category":"page"},{"location":"quickstart/#Methods","page":"Getting started","title":"Methods","text":"","category":"section"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Currently the following functions are implemented to analyze a StochSystem.","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Pages = [\"man/simulation.md\", \"man/systemanalysis.md\"]","category":"page"},{"location":"man/stochsystem/#Defining-a-StochSystem","page":"Defining a StochSystem","title":"Defining a StochSystem","text":"","category":"section"},{"location":"man/stochsystem/","page":"Defining a StochSystem","title":"Defining a StochSystem","text":"A StochSystem defines a stochastic dynamical system of the form","category":"page"},{"location":"man/stochsystem/","page":"Defining a StochSystem","title":"Defining a StochSystem","text":"textdvec x = f(vec x(t)  p_f)  textdt + sigma g(vec x(t)   p_g)  Sigma cdot textdmathcalN  ","category":"page"},{"location":"man/stochsystem/","page":"Defining a StochSystem","title":"Defining a StochSystem","text":"where vec x in mathbbR^textdim and mathcal N denotes a stochastic process.","category":"page"},{"location":"man/stochsystem/","page":"Defining a StochSystem","title":"Defining a StochSystem","text":"An instance of StochSystem is created via StochSystem(f, pf, dim [, σ [, g, pg, Σ , process]]), taking the following arguments:","category":"page"},{"location":"man/stochsystem/","page":"Defining a StochSystem","title":"Defining a StochSystem","text":"f (Function): Dynamical ODE rule describing the drift term of the system, corresponding to f in the ODEProblem of DifferentialEquations. Can be defined in-place (f!(du, u, p, t)) or out-of-place (f(u,p,t)).\npf (Vector or Nothing): Parameter vector for the drift term.\ndim (Int64): Dimension of the system.\nσ (Float64): Noise intensity. Defaults to 1.0.\ng (Function): Dynamical ODE rule describing the noise term of the system. Same format as f. Defaults to idfunc.\npg (Vector or Nothing): Parameter vector of the noise term.\nΣ (Matrix): Noise covariance matrix. Defaults to I (identity matrix).\nprocess (String): Noise process. Defaults to white-gauss (independent n-dimensional Brownian motion).","category":"page"},{"location":"man/simulation/#Simulating-the-system","page":"Simulating the system","title":"Simulating the system","text":"","category":"section"},{"location":"man/simulation/#Features","page":"Simulating the system","title":"Features","text":"","category":"section"},{"location":"man/simulation/","page":"Simulating the system","title":"Simulating the system","text":"Currently the following functions are implemented:","category":"page"},{"location":"man/simulation/","page":"Simulating the system","title":"Simulating the system","text":"equilib(sys, state; kwargs...): returns the stable equilibrium of the initial point state.\nfixedpoints(sys, box): wrapper for fixedpoints function of DynamicalSystems\nsimulate(sys, init; kwargs...): integrates the stochastic system forward in time\nrelax(sys, init; kwargs...): integrates the deterministic part of the system forward in time (evolution in the absence of noise)\ntransition(sys, x_i, x_f; kwargs...): simulate a sample transition trajectory from point xi to point xf\ntransitions(sys, x_i, x_f, N=1; kwargs): simulate an ensemble of N sample transitions","category":"page"},{"location":"man/systems/#Predefined-dynamical-systems","page":"Predefined systems","title":"Predefined dynamical systems","text":"","category":"section"},{"location":"#CriticalTransitions.jl","page":"Home","title":"CriticalTransitions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for the numerical investigation of critical transitions in stochastic dynamical systems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Building on DifferentialEquations.jl and DynamicalSystems.jl, this newly developing package aims to provide a toolbox for stochastic dynamics, with a focus on tipping phenomena and metastability.","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Current features\nStability analysis: fixed points, linear stability, basins of attraction, basin boundary\nStochastic simulation: Gaussian noise, uncorrelated and correlated, additive and multiplicative\nTransition path sampling: parallelized ensemble sampling","category":"page"},{"location":"","page":"Home","title":"Home","text":"ukw: Planned features\nRare event simulation: importance sampling, AMS\nLarge deviations: instantons and quasipotentials\nEdge tracking\nLangevin MCMC path sampling\n...?","category":"page"},{"location":"","page":"Home","title":"Home","text":"Developers: Reyk Börner, Ryan Deeley, and Raphael Römer","category":"page"},{"location":"","page":"Home","title":"Home","text":"This work is part of the CriticalEarth project.","category":"page"},{"location":"tutorial/#Tutorial","page":"Examples","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Example:-Bistable-FitzHugh-Nagumo-model","page":"Examples","title":"Example: Bistable FitzHugh-Nagumo model","text":"","category":"section"},{"location":"tutorial/","page":"Examples","title":"Examples","text":"include(\"src/CriticalTransitions.jl\")\nusing .CriticalTransitions\n\n# Parameters\np = [1., 3., 1., 1., 1., 0.]\n\n# StochSystem\nsys = StochSystem(FitzHughNagumo, p, 2)\n\n# Get stable fixed points\neqs, eigs, stab = fixedpoints(sys, [-2,-2], [2,2])\nfp1, fp2 = eqs[stab]\n\n# Simulate noisy trajectory starting from fixed point 1\nsim = simulate(sys, fp1)","category":"page"},{"location":"man/systemanalysis/#Analyzing-a-system's-stability-properties","page":"Stability analysis","title":"Analyzing a system's stability properties","text":"","category":"section"},{"location":"man/systemanalysis/","page":"Stability analysis","title":"Stability analysis","text":"CriticalTransitions.equilib(sys::StochSystem, state::State; kwargs...)","category":"page"},{"location":"man/systemanalysis/#CriticalTransitions.equilib-Tuple{StochSystem, Union{Vector, StaticArraysCore.SVector}}","page":"Stability analysis","title":"CriticalTransitions.equilib","text":"equilib(sys::StochSystem, state::State; kwargs...)\n\nReturns the equilibrium solution of the system sys for given initial condition state.\n\nWarning: This algorithm simply evolves the deterministic system forward in time until a steady-state condition is satisfied. Thus, the algorithm may output a false solution if it gets stuck in a quasi-equilibrium, or slowly evolving state. For more robust results, use fixedpoints.\n\nKeyword arguments:\n\nabstol = 1e-5: steady-state condition. Simulation ends when the rate of change (Euclidean distance in state space) of the state falls below abstol.\ntmax = 1e5: maximum simulation time before the algorithm stops even if the steady-state condition is not reached.\ndt = 0.01: time step of the ODE solver.\nsolver = Euler(): ODE solver used for evolving the state.\n\n\n\n\n\n","category":"method"}]
}
