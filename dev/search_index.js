var documenterSearchIndex = {"docs":
[{"location":"#Package-documentation","page":"Package documentation","title":"Package documentation","text":"","category":"section"},{"location":"","page":"Package documentation","title":"Package documentation","text":"Hello world!","category":"page"},{"location":"","page":"Package documentation","title":"Package documentation","text":"CriticalTransitions.equilib(sys::StochSystem, state::State; kwargs...)","category":"page"},{"location":"#CriticalTransitions.equilib-Tuple{StochSystem, Union{Vector, StaticArraysCore.SVector}}","page":"Package documentation","title":"CriticalTransitions.equilib","text":"equilib(sys::StochSystem, state::State; kwargs...)\n\nReturns the equilibrium solution of the system sys for given initial condition state.\n\nWarning: This algorithm simply evolves the deterministic system forward in time until a steady-state condition is satisfied. Thus, the algorithm may output a false solution if it gets stuck in a quasi-equilibrium, or slowly evolving state. For more robust results, use fixedpoints.\n\nKeyword arguments:\n\nabstol = 1e-5: steady-state condition. Simulation ends when the rate of change (Euclidean distance in state space) of the state falls below abstol.\ntmax = 1e5: maximum simulation time before the algorithm stops even if the steady-state condition is not reached.\ndt = 0.01: time step of the ODE solver.\nsolver = Euler(): ODE solver used for evolving the state.\n\n\n\n\n\n","category":"method"}]
}
